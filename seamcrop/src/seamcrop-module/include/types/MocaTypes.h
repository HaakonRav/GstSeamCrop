#ifndef TYPES_MOCA_TYPES_H
#define TYPES_MOCA_TYPES_H

// check if MSVC or GNU compiler is used
#undef COMPILER_MSVC
#if defined(_WIN32) 
#	if defined(_MSC_VER) 
#		define COMPILER_MSVC
#	endif
#endif


#undef COMPILER_GCC
#if defined(__GNUC__) 
#define COMPILER_GNU
#endif


#if defined(__APPLE__)
#   if defined(__MACH__)
#       define DARWIN
#   endif
#endif


// include config file (fixed file for MSVC or generated by configure)
#ifdef COMPILER_MSVC
#   include <MocaConfigWin32.h>
#else
#   ifdef COMPILER_GNU
#      include <MocaConfig.h>
#      define __STDC_CONSTANT_MACROS
#      include <stdint.h>
#   else
#      error "Unknown compiler, please add identification of compiler in MocaTypes.h."
#   endif
#endif


// check header files
#ifdef HAVE_LIMITS_H
#include <limits.h>
#else
#error "No limits.h available."
#endif


// check libraries
#ifndef HAVE_LIBGSL
#error "No libgsl available."
#endif
#ifndef HAVE_LIBGSLCBLAS
#error "No libgsl available."
#endif


// determine appropriate unsigned data types

#if SIZEOF_UNSIGNED_CHAR == 1
typedef unsigned char uint8;    /*  8bit */
#define MOCA_UINT8_MAX UCHAR_MAX
#else
#error "Could not determine uint8 data type."
#endif

#if SIZEOF_UNSIGNED_SHORT_INT == 2
typedef unsigned short int  uint16; /* 16bit */
#define MOCA_UINT16_MAX USHRT_MAX
#elif SIZEOF_UNSIGNED_INT == 2
typedef unsigned int  uint16;   /* 16bit */
#define MOCA_UINT16_MAX UINT_MAX
#else
#error "Could not determine uint16 data type."
#endif

#if SIZEOF_UNSIGNED_INT == 4
typedef unsigned int  uint32;   /* 32bit */
#define MOCA_UINT32_MAX UINT_MAX
#elif SIZEOF_UNSIGNED_LONG_INT == 4
typedef unsigned long int   uint32;  /* 32bit */
#define MOCA_UINT32_MAX ULONG_MAX
#else
#error "Could not determine uint32 data type."
#endif


#if SIZEOF_UNSIGNED_LONG_LONG_INT == 8
#if defined(_MSC_VER) 
	typedef unsigned __int64 uint64;  /* 64 bit */
	#define MOCA_UINT64_MAX  0xffffffffffffffffui64
#else
	typedef uint64_t uint64;  /* 64 bit */
	#define MOCA_UINT64_MAX  0xffffffffffffffffULL
#endif 

#else
#error "Could not determine uint64 data type."
#endif


// determine appropriate signed data types

#if SIZEOF_CHAR == 1
typedef char int8;              /*  8bit */
#define MOCA_INT8_MAX CHAR_MAX
#define MOCA_INT8_MIN CHAR_MIN
#else
#error "Could not determine int8 data type."
#endif

#if SIZEOF_SHORT_INT == 2
typedef short int int16;        /* 16bit */
#define MOCA_INT16_MAX SHRT_MAX
#define MOCA_INT16_MIN SHRT_MIN
#elif SIZEOF_INT == 2
typedef int int16;              /* 16bit */
#define MOCA_INT16_MAX INT_MAX
#define MOCA_INT16_MIN INT_MIN
#else
#error "Could not determine int16 data type."
#endif

#if SIZEOF_INT == 4
typedef int int32;              /* 32bit */
#define MOCA_INT32_MAX INT_MAX
#define MOCA_INT32_MIN INT_MIN
#elif SIZEOF_LONG_INT == 4
typedef long int int32;         /* 32bit */
#define MOCA_INT32_MAX LONG_MAX
#define MOCA_INT32_MIN LONG_MIN
#else
#error "Could not determine int32 data type."
#endif

#if SIZEOF_LONG_LONG_INT == 8

#if defined(_MSC_VER) 
	typedef signed __int64 int64;   /* 64bit */
	#define MOCA_INT64_MAX   9223372036854775807i64
	#define MOCA_INT64_MIN  -9223372036854775807i64
#else
	typedef int64_t int64; /* 64bit */
	#define MOCA_INT64_MAX   9223372036854775807LL
	#define MOCA_INT64_MIN  -9223372036854775807LL
#endif 

#else
#error "Could not determine int64 data type."
#endif


// determine appropriate data types for floats

//! \TODO hack used for MOCA_IEEE32_MAX / _MIN, took values from solaris limits.h
#if SIZEOF_FLOAT == 4
#define MOCA_FLOAT_MAX  3.402823466e+38F
#define MOCA_FLOAT_MIN -3.402823466e+38F
#else
#error "Could not determine ieee32 data type."
#endif


//! \TODO hack used for MOCA_IEEE64_MAX / _MIN, took values from solaris limits.h
#if SIZEOF_DOUBLE == 8
//typedef double ieee64;
#define MOCA_DOUBLE_MAX  1.7976931348623157E+308 
#define MOCA_DOUBLE_MIN -1.7976931348623157E+308 
#else
#error "Could not determine ieee64 data type."
#endif

typedef uint32 indexType;
typedef uint32 sizeType;
typedef int32 offsetType;
typedef int32 enumType;
typedef int32 ptrdiffType;


#endif
